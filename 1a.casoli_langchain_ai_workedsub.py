# -*- coding: utf-8 -*-
"""Casoli_Langchain-AI_WorkedSub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-S3R8HDQ4VB_gdmmHFD9catmw237ranZ

main.py
"""

#! pip install streamlit - Already done on pycharm
#import streamlit as st

#def main():
    #st.set_page_config(page_title="Hobby Recommender with In-built and RAG models")
    #st.title("Hobby Recommender with In-built and RAG models")

    #hobby_csv=st.file_uploader("Upload hobbylist CSV file", type=["csv"])





#if 'name' == '__main__':
    #main()

"""Installing environment variables"""

# pip install langchain
# pip install langchain_experimental
# pip install google-generativeai
# pip install langchain-google-genai  #To access in-built Google AI Gemini models
# pip install --upgrade --quiet  langchain-google-genai # to upgrade to newer version for 'key configuration'
# pip install -U google-generativeai  # To install Python SDK package for Gemini API & key configuration
# pip install -U langchain-community
# pip install pandas
# pip install google-generativeai

"""2: Get API key from google-gemini site and configure to use for project as below:"""

import os
import pandas as pd
import numpy as np
import google.generativeai as ggenai
from langchain_google_genai import ChatGoogleGenerativeAI as cgenai # To query project CSV
from langchain_experimental.agents import create_csv_agent
from langchain_community.document_loaders.csv_loader import CSVLoader
# from google.colab import userdata
from langchain_google_genai import GoogleGenerativeAI as genai
from langchain_community.chat_models import ChatGooglePalm   # To upload project CSV
from langchain_core.messages import HumanMessage, SystemMessage # To enable adding system message to gemini
from google.auth import default             # importing the google.auth library

# from langchain.chat_models import ChatGooglePalm   # Now deprecated
# import getpass

# Retrieve your Google API key
# GOOGLE_KEY = userdata.get('GOOGLE_KEY')
GOOGLE_KEY = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'

#Authenticate and set the API key
# creds,_ = default()  # default() to get credentials
# creds.token= GOOGLE_KEY ## sets the API key

#setting key API as environment variable
os.environ['GOOGLE_KEY'] = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'

"""3: Loading the CSV file  (on the left-side panel of this notebook)"""

# Read in csv
df=pd.read_csv('C:/Users/alaso/Documents/WAIproject- GENAI/archive/hobbylist.csv')

# Checking the CSV uploaded correctely
print(df)

"""4: Few Data Exploration Analysis"""

# Most Hobby
print(df.mode())

# Checking for missing values
print (df['Type']== np.nan)

# Frequency table to know how many category levels exist and
# number of hobbies in each level

hobbyType= pd.crosstab(index=df['Type'], columns='count')
print(hobbyType)

# Number of hobbies duplicated accross the type categories
print(df['Hobby-name'].duplicated().sum())

# Name of the 39 duplicated hobbies
print(df[df['Hobby-name'].duplicated()])

"""5: Setting model to acces in-built model for answers to prompt questions

a: Accessing the in-built model -Gemini pro
"""

# Define the model as llm2 with 'gemini-pro as the model to use)

# set environment for API key again
os.environ['GOOGLE_API_KEY'] = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'
os.environ['GOOGLE_KEY'] = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'

#llm2 = cgenai(model="gemini-pro") # command using ChatGoogleGenerativeAI that worked in colab but not here

llm2 = ggenai.GenerativeModel("gemini-pro") # Tweaking to use Google.geneartiveai

## Outputs from prompt questions for the llm2 model

#result = llm2.invoke("What hobby types are available?")
result = llm2.generate_content("What hobby types are available?")
print(result.text)
#print(result.content)

result = llm2.invoke("What do you recommend for challenging but indoortype hobbies?")
print(result.content)

result = llm2.invoke("I am bored, what can I do to pass the time?")
print(result.content)

"""b:  In-built model Tunning:

Add system message to the 1st human message by setting 'convert_system_message_to_human' = True, since Gemini does not support system message at the moment. (NB:This will soon be deprecated)
"""

# Adding system message to google in-built model - Gemini.

model = cgenai(model="gemini-pro", convert_system_message_to_human=True)
messages=[
        SystemMessage(content="You are an hobby expert, your name is Cason. Be polite at all times. \
                              Answer correctly as best as you can."),
        HumanMessage(content="What can I do indoors but also active?"),
    ]
print(model.invoke(messages).content)

"""6: Modeling for RAG:

Using Agent:
Accessing the project's CSV- Hobbylist dataset and generating responses to prompts concerning the CSV & gemini pro.
"""

# Retrieve your Google API key
#GOOGLE_API_KEY = userdata.get('GOOGLE_KEY')
GOOGLE_API_KEY = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'
#Authenticate and set the API key
# creds,_ = default()  # default() to get credentials
# creds.token= GOOGLE_KEY ## sets the API key

#setting key API as environment variable
os.environ['GOOGLE_API_KEY'] = 'AIzaSyAAjzrlHWwNN126Pa63yduTpULmrz0sXQc'

# Create the agent
agent = create_csv_agent(cgenai(temperature=0, model='gemini-pro'),
'C:/Users/alaso/Documents/WAIproject- GENAI/archive/hobbylist.csv',
                         verbose=True, allow_dangerous_code=True)

# Run the agent.
result1 = agent.run("[Which 10 hobby names are duplicated in df[df['Hobby-name']]]?")
# 10 requested to avoid overload
print(result1)

result1 = agent.run("[What category levels exists in the csv?]")
print(result1)

result1 = agent.run("[I am 65 years old, I don't like the sun and challenges,what hobbies can you recommend?]")
print(result1)

"""7:Accessing the RAG-tuned model (hobbylist csv + gemini pro) and generating responses to all prompts all. Here ChatGooglePalm command is used to load the csv"""

# Loading the hobbylist CSV into the session

loader = CSVLoader(file_path='C:/Users/alaso/Documents/WAIproject- GENAI/archive/hobbylist.csv')
data_hoby =  pd.DataFrame(loader.load())

# Initialize the model with API key and use 'ChatGooglePalm' to access the project dataset
Chat_model = ChatGooglePalm(model=['gemini-pro','data_hoby'], google_api_key=os.environ['GOOGLE_API_KEY'],
                            temperature=0.2)

result2 = Chat_model.invoke("What hobbies are duplicated in hobbylist.csv['Hobby-name']?")
print(result2.content)

result2 = Chat_model.invoke("How many hobbies are duplicated in the hobbylist.csv['Hobby-name']?")
print(result2.content)

result2 = Chat_model.invoke("[What hobby types are in Outdoors and Sports?]")
print(result2.content)

result2 = Chat_model.invoke("I don't like sun, I don't like challenge, I am 65 years old, what hobbies would you recommend?")
print(result2.content)